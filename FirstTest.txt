int : 부호가 있는 정수형(4byte)
long : 부호가 있는 정수형(8byte)
uint : 부호가 없는 정수형(4byte)
ulong : 부호가 없는 정수형(8byte)
short : 부호가 있는 정수형(2byte)
ushort : 부호가 있는 정수형(2byte)

2의 보수 : 모든 비트 반전 후 +1

char : 문자형(2byte) - ASCII 코드표에 따름
float : 실수형(4byte) 
double : 실수형(8byte)
bool : 논리형(1byte)(0이면 거짓, 0이 아니면 참)

어떤 자료형을 더 큰 동일 형태의 자료형으로 읽는 것은 가능(자료형의 승격), 이때 암시적 형변환이 일어남.
더 작은 크기의 자료형으로 읽는 것은 명시하지 않으면 불가능(자료 손실이 일어나기 때문)

철학적인 의미의 객체 : 어떤 사물이나 사념
소프트웨어 세상에서의 객체 : 어떤 사물이나 사념을 만들기 위해 확보한 특정 메모리 공간

초기화 : 확보한 메모리 공간에 값을 처음 써 넣는 과정
인스턴스 : 초기화가 된 객체

객체 선정
-> 추상화
-> 클래스화 
클래스 : 어떤 객체를 만들려면 어떤 종류의 또 얼마만큼의 메모리를 할당해야 하는지와, 어떤 기능이 있는지에 대한 정의
클래스는 멤버들을 가짐. 어떤 변수가 필요하다고 정의하면 해당 변수를 멤버로 가지게 된다.
> 객체화

사용자 정의 자료형 : 개발자가 직접 얼마만큼의 메모리를 어떻게 할당해야 하는지 정의할 수 있는 자료형

RAM
-Code -> 컴파일된 코드가 할당되는 영역 ex) f(x)
매개변수(parameter) :
여기서 x는 인자를 함수에 전달하는 매개체로 사용되는 변수
-Bss -> 처음 프로그램 인스턴스가 할당될 때 모든 비트가 0으로 Reset (초기값 명시 안한 경우)
-Data (초기값 명시한 경우)
-Heap -> 클래스타입 객체를 만들면 여기에 만들어짐.
& Stack ex) f(1) -> 함수 호출

Method c#에서 모든 함수는 Method임

수학 
f(x) = ax + b

프로그래밍 
f(변수의 자료형 x)
{
	ax + b
	return; -> 이 함수가 차지하고 있던 메모리 영역에 대한 제어권을 시스템에다가 반환하겠다는 명령어
}
함수 호출 :Code 영역의 함수 원본을 찾아서 그 복제본을 stack 영역에다가 할당하고, 매개변수 영역에는 인자로 전달할 값을 대입함. 

반환형 f(매개변수의 자료형 x)
{
	return ax +b;
}

CLR이 Managed Heap 영역을 매번 순회

-> GC Root(가비지컬렉션 대상 목록)

-> Garbage Collector가 해당 목록에서 사용되지 않는 메모리를 해제 시도
(이 과정 덕분에 굳이 소멸자를 호출할 필요가 없음)

함수호출스택
--------------------------------
Consle.WriteLine("Hello, Wold!")
--------------------------------
Main(string[] args)

함수 호출의 일련의 과정 -> Thread
분리해서 개별적으로 동작하는 것은 멀티 Thread


